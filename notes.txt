OOP
object oriented programming

-it is a programming paradigm that is centered around
objects rather than functions

-it is NOT a programming language or tool

-4 core concepts of OOP (pillars) (they are same in Python!!)
    1. Encapsulation
     -combine a group of related variables and functions into a 
 unit (object)
    -functions -> methods
    -variables -> properties
    -reduce complexity + increase reusability
    2. Abstraction
        -hiding some of the properties (like pressing play on vcr, you
        -don't know what happens internally when you press play, it just
        -plays, but there are functions that make it play)
        -simpler interface
        -reduces the impact of change

        - reduce complexity and isolate impact of changes
    3. Inheritance
    -mechanism that allows you to eliminate the outside code:
        -things like TextBox, Select, Checkbox
            -all have properties (like hidden and innerHTML)
            -all have methods (like click() and focus())
        -insead of defining each of these objects, we can have
        1 element that has properties and methods, and have 
        each of the objects inherit the objects properties and methods.
        -helps to eliminate redundant code

    4. Polymorphism
        -Poly = Many; Morph = Forms
        -technique that allows to get rid of long if and else or
        switch and case statements.
        -the way each element is rendered,
        you can define a render method that allows you to render()
        the object in different ways depening on the object it is 
        referencing. ex. element.render()
        -recactor ugly switch/case statements



objects


-Prototypes

-Portotypical Inheritance

-ES6 Classes (ECMAScript 6/2015)
    -ECMA is an organization that defines standards for technology
    -JavaScript is a  programming language that confirms the ECMA 
    script specifications

    ES6 - Classes (not like in C# or Java, they are syntatic sugar over
    prototypes and protypical inheritence)

-Modules


//prototypical inheritance 
//
//(there are two types of inheritance: classical vs prototypical inheritance)
    
// inheritance allows an object to take on the properties and 
    // methods of another object.

//base/super/parent class is the class that the other objects 
//will inhernet from
//the relationship has an 'is a' relationship:
// say parent/base/super object is a Shape
// and another object we make is Circle.  Circle 'is a' shape.

//the Shape object is the prototype(parent) of the Circle object


//prototypical inheritance
    //when accessing the property or method of an object
    //JavaScript first looks at the object itself to see if
    //it can find that property or method.  If it cannot find
    //it within the object, it looks up the chain to find the
    //prototype (parent) with the property or method all the way
    //up to the root object.

    //every object has a prototype or parent except the root object



//multilevel inheritance:
let myArray = [];

console.log(myArray);
//look at the __proto__ of this myArray object in the web inspect
//console, this is the prototype(parent) we can call it arrayBase 
//for this example.
//then scroll down and you will see another __proto__, if
//you open that up, you will find another object.  
//The objectBase(top level parent object)

function Circle(radius) {
    this.radius = radius;

    this.draw = function() {
        console.log('draw');
    };
}

const circle = new Circle(10);

//the Circle(radius) function is an object, and is the parent 
//object or prototype, for all circles created in the future 
//using the Circle constructor function (which is...again an
//object).


//objects created by a given constructor will have hte same 
//prototype.

//the constructor function will inherit from the JavaScript's 
//parent object for all objects: objectBase.





